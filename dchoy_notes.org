* emacs
** bookmarks
*** set a bookmark C-x r m
*** jump to bookmark C-x r b
*** list bookmarks C-x r l
**** rename r
**** mark D
**** removed marked x
**** save s
** moz js repl
*** C-c C-s: open a MozRepl buffer and switch to it
*** C-c C-l: save current buffer and load in MozRepl
*** C-M-x: send current function (c-mark-function) to MozRepl
*** C-c C-c: send current function to MozRepl and switch to it
*** C-c C-r: send current region to MozRepl
* nano
  ^ = ctrl
** ^G nano help
** ^R read an existing file into nano -- inserted at the current cursor position
** ^T opens a browser for selecting files
** ^L refresh screen
** ^O save buffer
** ^X close buffer
** NAVIGATION
*** ^A move to beginning of line
*** ^E move to end of line
*** ^Y pageup
*** ^V pagedown
*** ^P goto prev line
*** ^N goto next line
*** ^Space
*** M-Space
*** ^W search string or regex
** EDITING
*** ^K cut line
*** ^U paste line
*** ^C display position of cursor
*** ^_ goto line and column number
*** ^\ replace-string or regex
* vi
  enter vi command mode: [esc]
** :i insert before cursor
** :a append after cursor
** :wq save and exit
** :q! exit without saving
** :e! return to last saved state  
* sed
  sed can be used to replace strings in streams
** substitute (replace string)
   sed 's/<regex>/<replace with>/'
** substitute every occurence
   sed 's/<regex>/<replace with>/g'
** delete
   sed '/<regex>/d'
* awk
** rm grep files using awk to pipe to .sh
   find . | grep <regex> | awk '{print "rm "$1}' > tmp.sh
   source tmp.sh
** unix to dos linebreaks
   awk '{printf("%s\r\n",$0)}' unix_file > dos_file
* grep / find
** find a file
   find <dir> -name <filename>
** recursive grep find
   find . | grep -r
** mass rename
*** space to undersore in filename
    find -type f -name "* *" | rename 's/ /_/g'
** pipe grep output to file
   find . | grep <regex> > tmp.log
** find text in file
   find . -type f -exec grep -il "<string>" {} \;
* ssh
** setup
    ssh-keygen -t rsa
** ssh config
*** ~/.ssh/config
*** Host <name>
    Hostname <ip>
    User <username>
    port <portnum>
    IdentityFile <path to id_rsa>
    ProxyCommand <ssh some other host config> nc %h %p *only if needed
** scp
*** copy file from remote to local
    scp <user>@<remotehost>:<file> <local dir>
*** copy file from local to remote
    scp <file> <user>@<remotehost>:<remote dir>
*** copy dir from local to remote
    scp -r <dir> <user>@<remotehost>:<remote dir>
*** copy file from remote1 to remote2
    scp <user1>@<remotehost1>:<remote1 dir> \ <user2>@<remotehost2>:<remote2 dir>
*** copy files from local to remote
    scp <file1> <file2> <user>@<remotehost>:<remote dir>
*** copy files from remote to local
    scp <user>@<remotehost>:<dir/>\{<file1>,<file2>\} <local dir>
* linux
** shell
*** see required libs
    objdump -x ./<executable name> | grep NEEDED
** if stuck on lock screen
*** switch to VT1
    ctrl + alt + f1
*** login
*** NOTE these steps maybe not needed
**** killall /usr/lib/unity/unity-panel-service
**** /usr/lib/unity/unity-panel-service --inhibit logout
*** unity --replace
* windows
** batch cmds
*** if string match
    if %VARIABLE%==STRING ( do this )
* android
** uitest-project
   android create uitest-project -n <name> -t 1 -p <path>
** adb run method from jar on device
   adb -s <deivce_id> shell uiautomator runtest <filename>.jar -c <com.uiautomator.example.Test#unlock>
* docker
** copy file from host to image
*** get full id of container
    docker inspect -f '{{.Id}}' <container_name>
*** copy file over
    sudo cp <local_file_path> /var/lib/docker/aufs/mnt/<full_container_id>/root/<file_name_path>
       
* git
** config
   git config --list OR cat ~/.gitconfig #global
   cat .git/config #local
** clone a repo
   git clone <ssh.git>
   ex. git clone git@gitrepo.samsungseca.com:redex/rss.git
** git fetch --tags
** add and commit changes
   git add <filename>
   git commit -a -m '<message>'
** remove and commit changes
   git rm <filename>
   git commit -m "<message>"
** github remote
   git remote add origin git@github.com:username/reponame.git
   where origin is the remote name and git@github... is the remote url
** push to remote
   git push -u origin master #-u param remembers settings for next time
** diff
   git diff --staged
** unstage files
   git reset <staged file>
** branch
   git branch <branch name>
** list branches
   git branch
** switch to branch
   git checkout <branch name>
** delete branch
   git branch -d <branch name>
** merge
   first switch to branch that we want to merge into
   git merge <other branch name>
** edit commit message
   git commit --amend -m "<new commit message>"
   git push <remote> <branch> --force #if commit was already pushed
*** commit message with: closes #1 will close issue #1 in gitlab
* p4
** recursive file add in folder
   cd inside folder
   find . -type f -print | p4 -x - add
** recursive file type add
   find . -name *.<ext> -print | p4 -x - add
** show pending changelists for client
   p4 changes -c <client> -s pending
** p4 submit -c <changelist number>
** p4 sync
** checkout file
   p4 edit <filename>
** p4 change
** submit changes to files that have not been opened (ex. if sync'd via git)
   p4 diff -se //<client>/... | p4 -x - edit
   ex. p4 diff -se //DAVID_CHOY_LINUX_BOX_WORKSPACE/HONEY_TASK/SWRnD/Dev/Knox_Portal/Dev/Tools/scripts/... | p4 -x - edit
   this will open the files for edit and they will appear on the changelist
** p4 change -d <changelist number>
   delete changelist
* terminator
** CTRL + SHIFT + ..
** split view vert - E
** split view horiz - O
** focus next window - N
** focus prev window - P
** close focused window - W
** focus and enlarge active window - X
* python
** pip
*** installing pip3 for python3
    sudo apt-get install python3-pip
    sudo pip3 install <module-name>
** virtual env
*** create virtual env for a project
    cd to project folder
    virtualenv <environment name - ex. venv> #creates a copy of python and any packages installed with pip will be placed here
    source <env name>/bin/activate #to use virtual the virtual env
    deactivate #to stop using the env
*** lsvirtualenv #list all environments
*** cdvirtualenv #nav to dir of currently activated venv
*** cdsitepackages
*** lssitepackages
* C
** gcc -o <output_file_name> <src_file_name.c> #compile
** printf("%s\n", x ? "true" : "false");//print bool 
* C++
** g++ <src_file_name.cpp> -o <output_file_name> #compile
* setup
** PS1
   export PS1='\[\033[1;33m\]\u\[\033[0;32m\]@\h:\[\033[1;36m\]\W> \[\033[m'
